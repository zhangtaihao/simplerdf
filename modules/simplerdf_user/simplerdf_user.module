<?php
// $Id$
/**
 * @file
 * Main module file.
 * Minimal user mapping functionality.
 */

/**
 * Implements hook_init().
 */
function simplerdf_user_init() {
  if (variable_get('simplerdf_user_rel_index', FALSE)) {
    variable_set('simplerdf_user_rel_index', FALSE);
    simplerdf_clear_cache('user');

    // Re-index
    $result = db_query('SELECT uid FROM {users}');
    while ($uid = db_result($result)) {
      $user = user_load($uid);
      module_invoke_all('simplerdf_rel_save', 'user', $user);
    }
  }

  $args = arg();
  // Add taxonomy term RDF auto-discovery links
  if ($args[0] == 'user' && is_numeric($args[1]) && (count($args) == 2 || count($args) == 3 && $args[2] == 'view'))  {
    $user = user_load($args[1]);
    if ($user && user_view_access($user)) {
      module_load_include('inc', 'simplerdf', 'includes/simplerdf.arc');
      $path = variable_get('simplerdf_view_path', 'rdf');
      $format = variable_get('simplerdf_format', SIMPLERDF_DEFAULT_FORMAT);
      if (($mime_type = simplerdf_arc_get_mime_type($format)) || ($mime_type = 'text/plain')) {
        foreach ($tids as $tid) {
          // Add links for only local terms
          $term = simplerdf_user_term_load($tid);
          if (empty($term->remote_uri)) {
            drupal_add_link(array('rel' => 'meta', 'type' => $mime_type, 'title' => 'RDF', 'href' => url('taxonomy/term/' . $tid . '/' . $path)));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function simplerdf_user_menu() {
  $items[] = array();

  $view_path = variable_get('simplerdf_user_view_path', 'rdf');
  $administer_simplerdf = array('administer simplerdf');

  // Check to make sure we aren't overriding RDF (should only happen when
  // RDF is installed after this module and path remains 'rdf').
  if ($view_path && !($view_path == 'rdf' && module_exists('rdf'))) {
    $items['user/%user/' . $view_path] = array(
      'title' => check_plain(variable_get('simplerdf_view_title', 'RDF')),
      'description' => 'View the RDF document.',
      'page callback' => 'simplerdf_user_render_user',
      'page arguments' => array(1),
      'access callback' => 'user_view_access',
      'access arguments' => array(1),
      'type' => variable_get('simplerdf_view_tab', TRUE) ? MENU_LOCAL_TASK : MENU_CALLBACK,
    );
  }

  $items['admin/user/simplerdf'] = array(
    'title' => 'Simple RDF mappings',
    'description' => 'Manage RDF mappings for users.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplerdf_user_admin_mappings_form'),
    'access arguments' => $administer_simplerdf,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'simplerdf_user.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function simplerdf_user_ctools_plugin_api($owner, $api) {
  // Default plugins
  if ($owner == 'simplerdf') {
    switch ($api) {
      case 'mappers':
        return array('version' => 1);

      case 'content_mappers':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function simplerdf_user_ctools_plugin_directory($owner, $type) {
  if ($owner == 'simplerdf') {
    return 'plugins/' . $type;
  }
}

/**
 * Implements hook_features_api().
 */
function simplerdf_user_features_api() {
  module_load_include('inc', 'simplerdf_user', 'simplerdf_user.features');
  return _simplerdf_user_features_api();
}

/**
 * Implements hook_user().
 */
function simplerdf_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'update':
      simplerdf_clear_cache('user', $account->uid);
    case 'insert':
      module_invoke_all('simplerdf_rel_save', 'user', $account);
      break;

    case 'delete':
      simplerdf_clear_cache('user', $account->uid);
      break;
  }
}

/**
 * Implements hook_simplerdf_rel_save().
 */
function simplerdf_user_simplerdf_rel_save($type, $object) {
  if ($type == 'node') {
    // Prepare node fields
    $node = &$object;
    $nid = $node->nid;
    $type = content_types($node->type);
    $fields = $type['fields'];

    // Register author link
    if ($node->uid) {
      simplerdf_rel_register('node', $nid, 'user', $node->uid);
    }

    // Register userreference links
    foreach ($fields as $field_name => $field) {
      if ($field['type'] == 'userreference' && isset($node->$field_name)) {
        foreach ($node->$field_name as $delta => $value) {
          if ($value) {
            simplerdf_rel_register('node', $nid, 'user', $value['uid']);
          }
        }
      }
    }
  }
}

/**
 * Render a user RDF document.
 */
function simplerdf_user_render_user($user) {
  if ($cache = cache_get('user:' . $user->uid . ':document', 'cache_simplerdf')) {
    // Load cached document
    $document = $cache->data;
  }
  else {
    $triples = simplerdf_user_build_triples($user);

    // Render triples
    module_load_include('inc', 'simplerdf', 'includes/simplerdf.render');
    $triples = simplerdf_render_process_triples($triples);
    if ($document = simplerdf_render_build_document($triples)) {
      cache_set('user:' . $user->uid . ':document', $document, 'cache_simplerdf');
    }
  }

  if ($document) {
    // Display document
    drupal_set_header('Content-Type: ' . $document['type']);
    drupal_set_header('Content-Disposition: inline; filename=user-' . $user->uid . '.rdf');
    echo $document['content'];
    exit;
  }
  else {
    // Document could not be built
    drupal_not_found();
  }
}

/**
 * Build user RDF triples.
 *
 * @param stdClass $user
 *   User object.
 *
 * @return array
 *   Raw RDF triples.
 */
function simplerdf_user_build_triples($user) {
  // Map fields
  $triples = array();
  $mappings = simplerdf_user_get_mappings();
  $uri = simplerdf_user_get_useruri($user->uid);
  foreach ($mappings as $field => $properties) {
    $triples = array_merge($triples, simplerdf_user_map_field($user, $uri, $properties, $field));
  }

  // Triples postprocessing
  drupal_alter('simplerdf_user_triples', $triples);

  return $triples;
}

/**
 * Map user RDF fields.
 *
 * @param stdClass $user
 *   User object.
 * @param string $useruri
 *   URI representing the user.
 * @param array $properties
 *   Array of RDF properties mapped for this field.
 * @param string $field
 *   Name of the field.
 *
 * @return array
 *   RDF triples.
 */
function simplerdf_user_map_field($user, $useruri, $properties, $field) {
  // Map field
  $triples = array();
  foreach ($properties as $property) {
    $result = simplerdf_user_map_value($user, $useruri, $property, $field);
    if (is_array($result) && !empty($result)) {
      $triples = array_merge($triples, $result);
    }
  }

  return $triples;
}

/**
 * Helper function to map a field value of a user.
 *
 * @param array $user
 *   Term object.
 * @param string $useruri
 *   Term URI.
 * @param string $property
 *   RDF property mapping.
 * @param string $field
 *   Field name.
 *
 * @return array
 *   RDF triples for this particular property.
 */
function simplerdf_user_map_value($user, $useruri, $property, $field) {
  $s = simplerdf_make_subject('uri', $useruri);
  $p = simplerdf_make_predicate($property);

  $triples = array();
  switch ($field) {
    // RDF type
    case 'rdftype':
      $o = simplerdf_make_object('uri', $property);
      $triples[] = $s + simplerdf_make_predicate('rdf:type') + $o;
      break;

    // Single literal values
    case 'name':
      if (!empty($user->$field)) {
        $o = simplerdf_make_object('literal', $user->$field);
        $triples[] = $s + $p + $o;
      }
      break;

    // Email address
    case 'mail':
      if (!empty($user->$field)) {
        $o = simplerdf_make_object('uri', 'mailto:' . $user->$field);
        $triples[] = $s + $p + $o;
      }
      break;
  }

  return $triples;
}


/**********************************************************
 * CRUD functions.
 **********************************************************/

/**
 * Get RDF mappings for a user.
 *
 * @return array
 *   Arrays of properties keyed by field name.
 */
function simplerdf_user_get_mappings() {
  return variable_get('simplerdf_user_mappings', array());
}

/**
 * Save user RDF mappings.
 *
 * @param array $mappings
 *   Array of mappings. (See return value of simplerdf_user_get_mappings().)
 */
function simplerdf_user_save_mappings(array $mappings) {
  // Validate mappings
  foreach ($mappings as $field => $properties) {
    if (!is_array($properties)) {
      return;
    }
    else {
      foreach ($properties as $property) {
        if (!is_string($property)) {
          return;
        }
      }
    }
  }
  // Save
  variable_set('simplerdf_user_mappings', $mappings);
}

/**
 * Get mapping fields for user.
 *
 * @return array
 *   Field titles keyed by field name.
 */
function simplerdf_user_get_fields() {
  return array(
    'rdftype' => t('RDF class (rdf:type)'),
    'name' => t('User name'),
    'mail' => t('Email address'),
  );
}


/**********************************************************
 * Form alter hooks.
 **********************************************************/

// Simple RDF settings

/**
 * Implements hook_form_FORM_ID_alter() for simplerdf_admin_settings_form().
 */
function simplerdf_user_form_simplerdf_admin_settings_form_alter(&$form, &$form_state) {
  $form['view_path']['user_path'] = array(
    '#type' => 'textfield',
    '#title' => t('User RDF path'),
    '#field_prefix' => 'user/%/',
    '#default_value' => variable_get('simplerdf_user_view_path', 'rdf'),
    '#required' => TRUE,
    '#description' => t('Internal path to display user RDF documents at.'),
  );

  $form['#validate'][] = 'simplerdf_user_settings_form_validate';
  $form['#submit'][] = 'simplerdf_user_settings_form_submit';
}

/**
 * Injected validator for Simple RDF settings form.
 */
function simplerdf_user_settings_form_validate($form, $form_state) {
  $path = $form_state['values']['user_path'];
  if (preg_match('/[^A-Za-z0-9]/', $path)) {
    form_set_error('user_path', t('Invalid character detected for user RDF path. Please enter only lowercase, uppercase, and numeric characters.'));
  }
  elseif ($path != variable_get('simplerdf_user_view_path', 'rdf') && db_result(db_query("SELECT 1 FROM {menu_router} WHERE path = '%s'", "user/%/$path"))) {
    form_set_error('user_path', t('The specified path already exists. Please enter different one.'));
  }
}

/**
 * Injected submit handler for Simple RDF settings form.
 */
function simplerdf_user_settings_form_submit($form, &$form_state) {
  $path = $form_state['values']['user_path'];
  if ($path != variable_get('simplerdf_user_view_path', 'rdf')) {
    // Save path
    variable_set('simplerdf_user_view_path', $path);
    $form_state['redirect'] = 'admin/build/simplerdf/settings/rebuild';
  }
  simplerdf_clear_cache('user');
}


/**********************************************************
 * Helper functions.
 **********************************************************/

/**
 * Get the URI of a user.
 *
 * @param int $uid
 *   User ID.
 *
 * @return string
 *   User URI.
 */
function simplerdf_user_get_useruri($uid) {
  return url('user/' . $uid, array('absolute' => TRUE));
}
