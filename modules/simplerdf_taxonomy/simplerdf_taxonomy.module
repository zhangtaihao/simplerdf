<?php
// $Id$
/**
 * @file
 * Main module file.
 * Minimal taxonomy mapping functionality.
 */

/**
 * Implements hook_menu().
 */
function simplerdf_taxonomy_menu() {
  $items[] = array();

  $administer_simplerdf_mappings = array('administer simplerdf mappings');
  $items['admin/content/taxonomy/simplerdf'] = array(
    'title' => 'Simple RDF mappings',
    'description' => 'Manage RDF mappings for taxonomies.',
    'page callback' => 'simplerdf_taxonomy_admin_mappings_overview',
    'access arguments' => $administer_simplerdf_mappings,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simplerdf_taxonomy.admin.inc',
    'weight' => -1,
  );
  $items['admin/content/taxonomy/%simplerdf_taxonomy_vocabulary/simplerdf'] = array(
    'title' => 'Simple RDF mappings',
    'description' => 'Manage RDF mappings for terms in the vocabulary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplerdf_taxonomy_admin_vocabulary_mappings_form', 3),
    'access arguments' => $administer_simplerdf_mappings,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simplerdf_taxonomy.admin.inc',
    'weight' => -1,
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function simplerdf_taxonomy_ctools_plugin_api($owner, $api) {
  // Default plugins
  if ($owner == 'simplerdf') {
    switch ($api) {
      case 'mappers':
        return array('version' => 1);

      case 'content_mappers':
        return array('version' => 1);

      case 'uri_formats':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function simplerdf_taxonomy_ctools_plugin_directory($owner, $type) {
  if ($owner == 'simplerdf') {
    return 'plugins/' . $type;
  }
}

/**
 * Implements hook_features_api().
 */
function simplerdf_taxonomy_features_api() {
  module_load_include('inc', 'simplerdf_taxonomy', 'simplerdf_taxonomy.features');
  return _simplerdf_taxonomy_features_api();
}

/**
 * Implements hook_simplerdf_types().
 */
function simplerdf_taxonomy_simplerdf_types() {
  return array(
    'term' => array(
      'title singular' => t('Term'),
      'title plural' => t('Terms'),
      'singular' => t('term'),
      'plural' => t('terms'),
    ),
  );
}

/**
 * Implements hook_simplerdf_classify().
 */
function simplerdf_taxonomy_simplerdf_classify($type, $object) {
  // Classify node
  if ($type == 'term') {
    return _simplerdf_taxonomy_get_vocabulary_name($object->vid);
  }
}

/**
 * Implements hook_simplerdf_term_load().
 */
function simplerdf_taxonomy_simplerdf_term_load($id) {
  return taxonomy_get_term($id);
}

/**
 * Implements hook_simplerdf_rel_batch_term_count().
 */
function simplerdf_taxonomy_simplerdf_rel_batch_term_count() {
  return db_result(db_query('SELECT COUNT(*) FROM {term_data}'));
}

/**
 * Implements hook_simplerdf_rel_batch_term_list().
 */
function simplerdf_taxonomy_simplerdf_rel_batch_term_list(&$sandbox) {
  static $limit = 300;

  if (!isset($sandbox['current_id'])) {
    $sandbox['current_id'] = 0;
  }

  // Load tids
  $result = db_query_range('SELECT tid FROM {term_data} WHERE tid > %d ORDER BY tid', $sandbox['current_id'], 0, $limit);
  $list = array();
  while ($tid = db_result($result)) {
    $list[] = $tid;
    $sandbox['current_id'] = $tid;
  }

  return $list;
}

/**
 * Implements hook_simplerdf_term_autocomplete().
 */
function simplerdf_taxonomy_simplerdf_term_autocomplete($string) {
  // Match on term ID or name
  $result = db_query("SELECT tid, name FROM {term_data} WHERE tid LIKE '%%%s%%' OR name LIKE '%%%s%%'", $string, $string);
  $matches = array();
  while ($match = db_fetch_array($result)) {
    $matches[$match['tid']] = "$match[name] (tid: $match[tid])";
  }
  return $matches;
}


/**********************************************************
 * CRUD functions.
 **********************************************************/

/**
 * Wildcard loader for a taxonomy term.
 */
function simplerdf_taxonomy_term_load($tid) {
  static $terms = array();
  if (isset($terms[$tid])) {
    // Return cached term
    return $terms[$tid];
  }
  if ($tid && is_numeric($tid)) {
    $term = taxonomy_get_term($tid);
    if ($term) {
      // Load extra data
      $data = db_fetch_array(db_query("SELECT * FROM {simplerdf_taxonomy_term} WHERE tid = %d", $tid));
      if ($data) {
        $term = (object) array_merge((array) $term, $data);
      }
      // Cache term
      $terms[$tid] = $term;

      return $term;
    }
  }
}

/**
 * Wildcard loader for an exportable vocabulary (i.e. with machine name defined).
 */
function simplerdf_taxonomy_vocabulary_load($vid) {
  if ($vid && is_numeric($vid)) {
    $vocabulary = taxonomy_vocabulary_load($vid);
    if ($vocabulary && $vocabulary->module && substr($vocabulary->module, 0, 9) == 'features_') {
      return $vocabulary;
    }
  }
}

/**
 * Get RDF fields for a vocabulary.
 *
 * @param int $vid
 *   Vocabulary ID.
 *
 * @return array
 *   Array of fields keyed by field name.
 */
function simplerdf_taxonomy_get_fields($vid) {
  $machine_name = _simplerdf_taxonomy_get_vocabulary_name($vid);
  if (!empty($machine_name)) {
    return simplerdf_get_fields('term', $machine_name);
  }
}

/**
 * Get RDF mappings for a vocabulary.
 *
 * @param int $vid
 *   Vocabulary ID.
 *
 * @return array
 *   Arrays of properties keyed by field name.
 */
function simplerdf_taxonomy_get_mappings($vid) {
  $machine_name = _simplerdf_taxonomy_get_vocabulary_name($vid);
  if (!empty($machine_name)) {
    return simplerdf_get_mappings('term', $machine_name);
  }
}

/**
 * Save vocabulary RDF mappings.
 *
 * @param int $vid
 *   Vocabulary ID.
 * @param array $mappings
 *   Array of mappings. (See return value of simplerdf_taxonomy_get_mappings().)
 */
function simplerdf_taxonomy_save_mappings($vid, array $mappings) {
  $machine_name = _simplerdf_taxonomy_get_vocabulary_name($vid);
  if (!empty($machine_name)) {
    // Save
    simplerdf_save_mappings('term', $machine_name, $mappings);
  }
}

/**
 * Implements hook_taxonomy().
 */
function simplerdf_taxonomy_taxonomy($op, $type, $array) {
  if ($type == 'term') {
    switch ($op) {
      case 'update':
        simplerdf_clear_cache('term', $array['tid']);
        simplerdf_rel_unregister('term', $array['tid']);
      case 'insert':
        $tid = $array['tid'];
        $remote_uri = $array['simplerdf_remote_uri'];
        if (empty($remote_uri) && $op == 'update') {
          // Unset remote URI
          db_query("DELETE FROM {simplerdf_taxonomy_term} WHERE tid = %d", $tid);
        }
        else {
          // Add remote URI
          $term = array(
            'tid' => $array['tid'],
            'remote_uri' => $remote_uri,
          );
          drupal_write_record('simplerdf_taxonomy_term', $term, array('tid'));
          if (!db_affected_rows()) {
            drupal_write_record('simplerdf_taxonomy_term', $term);
          }
        }

        simplerdf_rel_index_object('term', $array['tid'], $term);
        break;

      case 'delete':
        db_query("DELETE FROM {simplerdf_taxonomy_term} WHERE tid = %d", $array['tid']);
        simplerdf_clear_cache('term', $array['tid']);
        simplerdf_rel_remove_object('term', $array['tid'], (object) $array);
        break;
    }
  }
  elseif ($type == 'vocabulary') {
    switch ($op) {
      case 'delete':
        // Clean up mappings
        $machine_name = _simplerdf_taxonomy_get_vocabulary_name((object) $array);
        if ($machine_name) {
          simplerdf_delete_mappings('term', $machine_name);
        }
        break;
    }
    simplerdf_clear_cache('term');
  }
}

/**
 * Implements hook_simplerdf_rel_objects().
 */
function simplerdf_taxonomy_simplerdf_rel_objects($type, $object) {
  if ($type == 'node') {
    // Prepare node fields
    $node = &$object;
    $type = content_types($node->type);
    $fields = $type['fields'];
    $rels = array();

    // Register core taxonomy terms
    if (!empty($node->taxonomy)) {
      foreach ($node->taxonomy as $k => $v) {
        // Are terms grouped by vid?
        if (is_array($v)) {
          // Yes
          foreach ($v as $tid) {
            $rels[] = array('type' => 'term', 'id' => $tid);
          }
        }
        elseif (is_numeric($v)) {
          // No; just the key is the tid
          $rels[] = array('type' => 'term', 'id' => $tid);
        }
      }
    }

    // Register content_taxonomy terms
    foreach ($fields as $field_name => $field) {
      if ($field['type'] == 'content_taxonomy' && isset($node->$field_name)) {
        foreach ($node->$field_name as $delta => $value) {
          if ($value) {
            $rels[] = array('type' => 'term', 'id' => $value['value']);
          }
        }
      }
    }

    return $rels;
  }
}


/**********************************************************
 * Form alter hooks.
 **********************************************************/

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 */
function simplerdf_taxonomy_form_taxonomy_form_term_alter(&$form, &$form_state) {
  // Remote URI settings
  $form['advanced']['simplerdf'] = array(
    '#type' => 'fieldset',
    '#title' => t('Simple RDF'),
    '#description' => t('Configure term settings for use with Simple RDF.'),
  );

  if ($form['#term'] && $form['#term']['tid']) {
    $full_term = simplerdf_taxonomy_term_load($form['#term']['tid']);
    $remote_uri = $full_term->remote_uri;
  }
  $form['advanced']['simplerdf']['simplerdf_remote_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Remote term URI'),
    '#default_value' => $remote_uri,
    '#description' => t('If specified, any RDF mapping to this term will use this URI instead of the local path of this term. An example value is a DBpedia category page; nodes tagged with this term contain triples relating them to other content on the Web via the common category URI.'),
  );
}


/**********************************************************
 * Helper functions.
 **********************************************************/

/**
 * Get vocabulary name by ID.
 */
function _simplerdf_taxonomy_get_vocabulary_name($vocabulary) {
  static $names = array();
  // Use vocabulary ID
  $vid = is_object($vocabulary) ? (property_exists($vocabulary, 'vid') ? $vocabulary->vid : 0) : $vocabulary;
  if ($vid && !isset($names[$vid])) {
    if (!is_object($vocabulary)) {
      // Normalize into object
      $vocabulary = taxonomy_vocabulary_load($vid);
    }
    $names[$vid] = ($vocabulary->module && substr($vocabulary->module, 0, 9) == 'features_') ? substr($vocabulary->module, 9) : FALSE;
  }
  return $names[$vid] ? $names[$vid] : NULL;
}
