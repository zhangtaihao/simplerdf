<?php
// $Id$
/**
 * @file
 * Module installer.
 */

/**
 * Implements hook_requirements().
 */
function simplerdf_requirements($phase) {
  module_load_include('inc', 'simplerdf', 'includes/simplerdf.arc');
  simplerdf_arc_include();

  $t = get_t();

  $requirements = array();
  switch ($phase) {
    case 'install':
      if (!class_exists('ARC2')) {
        // Missing ARC2
        $requirements['simplerdf_arc2'] = array(
          'title' => $t('Simple RDF: ARC2'),
          'description' => $t('The ARC2 library is missing. Please install it under the sites/all/libraries folder.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
    case 'runtime':
      if (class_exists('ARC2')) {
        // Show ARC2 version
        $requirements['simplerdf_arc2'] = array(
          'title' => $t('Simple RDF: ARC2'),
          'value' => ARC2::getVersion(),
          'severity' => REQUIREMENT_OK,
        );
      }
      else {
        // Missing ARC2
        $requirements['simplerdf_arc2'] = array(
          'title' => $t('Simple RDF: ARC2'),
          'value' => $t('Not found'),
          'description' => $t('The ARC2 library is missing. Please install it under the sites/all/libraries folder.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
  }
  return $requirements;
}

/**
 * @todo
 * Implements hook_schema().
 */
function simplerdf_schema() {
  $t = get_t();

  // Mappings
  $schema['simplerdf_mappings'] = array(
    'description' => $t('Mappings from node field to RDF property.'),

    'fields' => array(
      'type' => array(
        'description' => $t('Object type for the field mapping.'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'classifier' => array(
        'description' => $t('Object classifier.'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'field' => array(
        'description' => $t('Field for mapping.'),
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'properties' => array(
        'description' => $t('RDF properties mapped to the field.'),
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),

    'primary key' => array('type', 'classifier', 'field'),

    // Index on content type
    'indexes' => array(
      'content_type' => array('content_type'),
    ),
  );

  $schema['simplerdf_rel'] = _simplerdf_schema_rel();

  // Cache tables
  $cache_schema = drupal_get_schema_unprocessed('system', 'cache');

  $schema['cache_simplerdf'] = $cache_schema;
  $schema['cache_simplerdf']['description'] = 'Cache Simple RDF data.';

  return $schema;
}

/**
 * Define object relations schema.
 */
function _simplerdf_schema_rel() {
  $t = get_t();
  return array(
    'description' => $t('Track object dependency relations for use in functionalities like clearing cache to work out related objects to refer to and/or update. Relations defined in this table are generally assumed to be one-way.'),
    'fields' => array(
      'source_type' => array(
        'description' => $t('Object type on the source end.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'source_id' => array(
        'description' => $t('Object ID on the source end.'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'target_type' => array(
        'description' => $t('Object type on the target end.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'target_id' => array(
        'description' => $t('Object ID on the target end.'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    // Unique set comprised of all columns
    'primary key' => array('source_type', 'source_id', 'target_type', 'target_id'),
    // Index objects plus type-based object lookups
    'indexes' => array(
      'source' => array('source_type', 'source_id'),
      'target' => array('target_type', 'target_id'),
      'source_type' => array('source_type'),
      'target_type' => array('target_type'),
      'source_target_type' => array('source_type', 'source_id', 'target_type'),
      'target_source_type' => array('target_type', 'target_id', 'source_type'),
    ),
  );
}

/**
 * Implements hook_install().
 */
function simplerdf_install() {
  drupal_install_schema('simplerdf');

  variable_set('simplerdf_view_path', 'simplerdf');
  variable_set('simplerdf_view_tab', TRUE);
  variable_set('simplerdf_view_title', 'RDF');
  variable_set('simplerdf_format', 'RDFXML');
  variable_set('simplerdf_uri_formats', array('node' => 'default', 'user' => 'default'));
  variable_set('simplerdf_nodeuri_settings', array());
  variable_set('simplerdf_rel_index', TRUE);
}

/**
 * Implements hook_uninstall().
 */
function simplerdf_uninstall() {
  drupal_uninstall_schema('simplerdf');

  variable_del('simplerdf_view_path');
  variable_del('simplerdf_view_tab');
  variable_del('simplerdf_view_title');
  variable_del('simplerdf_format');
  variable_del('simplerdf_uri_formats');
  variable_del('simplerdf_nodeuri_settings');
  variable_del('simplerdf_rel_index');
}

/**
 * Implements hook_update_N() for 6001.
 */
function simplerdf_update_6001(&$sandbox) {
  $ret = array();

  // Rename 'class' to 'rdftype'
  $ret[] = update_sql("UPDATE {simplerdf_mappings} SET field = 'rdftype' WHERE field = 'class'");

  return $ret;
}

/**
 * Implements hook_update_N() for 6002.
 */
function simplerdf_update_6002(&$sandbox) {
  $ret = array();

  // Install object relations table
  db_create_table($ret, 'simplerdf_rel', _simplerdf_schema_rel());
  variable_set('simplerdf_rel_index', TRUE);

  cache_clear_all('*', 'cache_simplerdf', TRUE);

  return $ret;
}

/**
 * Implements hook_update_N() for 6003.
 */
function simplerdf_update_6003(&$sandbox) {
  // TODO Rename 'content_type' to 'classifier'
  // TODO Add 'type'
}
